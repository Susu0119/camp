<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="com.m4gi.mapper.CampgroundMapper">
	
	<!-- 캠핑장 목록 조회 -->
	<select id="selectSearchedCampgrounds" parameterType="CampgroundSearchDTO" resultMap="CampgroundCardResultMap">
	    SELECT
	        c.campground_id AS campgroundId,
	        c.campground_name AS campgroundName,
	        c.addr_sido AS addrSido,
	        c.addr_sigungu AS addrSigungu,
	        c.campground_type AS campgroundType,
	        COALESCE(AVG(r.review_rating), 0) AS reviewRatingAvg,
	        COUNT(r.review_id) AS reviewCount,
	        SUM(cs.current_stock) AS totalCurrentStock,
	        JSON_UNQUOTE(JSON_EXTRACT(c.campground_image, '$.thumbnail[0]')) AS campgroundImage,
	        <if test="startDate != null">
	        COALESCE(sub_price.campground_price, sub_default_price.campground_price) AS campgroundPrice,
	        </if>
	        <if test="startDate == null">
	        sub_default_price.campground_price AS campgroundPrice,
	        </if>
	        CASE
	            WHEN EXISTS (
	                SELECT 1 FROM wishlists w
	                WHERE w.provider_code = #{providerCode}
	                AND w.provider_user_id = #{providerUserId}
	                AND w.wishlist_type = 1
	                AND w.campground_id = c.campground_id
	            )
	            THEN 1 ELSE 0
	        END AS isWishlisted
	    FROM campgrounds c
	    LEFT JOIN reviews r
	        ON c.campground_id = r.campground_id
	    LEFT JOIN campground_sites cs
	        ON c.campground_id = cs.campground_id
	    <if test="startDate != null">
	    LEFT JOIN (
	        SELECT
	            ps.campground_id,
	            MIN(CASE
	                WHEN DAYOFWEEK(#{startDate}) IN (1, 7) THEN ps.peak_weekend_price
	                ELSE ps.peak_weekday_price
	            END) AS campground_price
	        FROM campground_peak_seasons ps
	        WHERE #{startDate} BETWEEN ps.peak_start_date AND ps.peak_end_date
	        GROUP BY ps.campground_id
	    ) AS sub_price ON c.campground_id = sub_price.campground_id
	    LEFT JOIN (
	        SELECT
	            z.campground_id,
	            MIN(CASE
	                WHEN DAYOFWEEK(#{startDate}) IN (1, 7) THEN z.default_weekend_price
	                ELSE z.default_weekday_price
	            END) AS campground_price
	        FROM campground_zones z
	        WHERE z.is_active = TRUE
	        GROUP BY z.campground_id
	    ) AS sub_default_price ON c.campground_id = sub_default_price.campground_id
	    </if>
	    <if test="startDate == null">
	    LEFT JOIN (
	        SELECT
	            z.campground_id,
	            MIN(z.default_weekday_price) AS campground_price
	        FROM campground_zones z
	        WHERE z.is_active = TRUE
	        GROUP BY z.campground_id
	    ) AS sub_default_price ON c.campground_id = sub_default_price.campground_id
	    </if>
	
	    WHERE c.campground_name LIKE CONCAT('%', #{campgroundName}, '%')
		
		<if test="campgroundIdList != null and !campgroundIdList.isEmpty()">
			AND c.campground_id IN
			<foreach item="id" collection="campgroundIdList" open="(" separator="," close=")">
				#{id}
			</foreach>
		</if>
		
	    <if test="addrSigunguList != null and !addrSigunguList.isEmpty()">
		  AND c.addr_sigungu IN
		  <foreach item="sigungu" collection="addrSigunguList" open="(" separator="," close=")">
		    #{sigungu}
		  </foreach>
		</if>
	
	    <if test="startDate != null and endDate != null">
	    AND NOT EXISTS (
	        SELECT 1
	        FROM campground_closed_dates cd
	        WHERE cd.campground_id = c.campground_id
	        AND (
	            (cd.closed_start_date &lt;= #{startDate} AND cd.closed_end_date &gt;= #{startDate}) OR
	            (cd.closed_start_date &lt;= #{endDate} AND cd.closed_end_date &gt;= #{endDate}) OR
	            (cd.closed_start_date &gt;= #{startDate} AND cd.closed_end_date &lt;= #{endDate})
	        )
	    )
	
	    AND EXISTS (
	        SELECT 1
	        FROM campground_sites cs_inner
	        WHERE cs_inner.campground_id = c.campground_id
	        AND cs_inner.capacity >= #{people}
	        AND NOT EXISTS (
	            SELECT 1
	            FROM reservations r2
	            WHERE r2.reservation_site = cs_inner.site_id
	            AND r2.reservation_date BETWEEN #{startDate} AND #{endDate}
	        )
	    )
	    </if>
	    <if test="startDate == null or endDate == null">
	    AND EXISTS (
	        SELECT 1
	        FROM campground_sites cs_inner
	        WHERE cs_inner.campground_id = c.campground_id
	        AND cs_inner.capacity >= #{people}
	    )
	    </if>
	
	    GROUP BY
	        c.campground_id,
	        c.campground_name,
	        c.addr_sido,
	        c.addr_sigungu,
	        c.campground_type,
	        c.campground_image<if test="startDate != null">,
	        sub_price.campground_price</if>,
	        sub_default_price.campground_price
		
		<choose>
			<when test="'price_low'.equals(sortOption)">
			  <if test="startDate != null">
			  ORDER BY COALESCE(sub_price.campground_price, sub_default_price.campground_price) ASC
			  </if>
			  <if test="startDate == null">
			  ORDER BY sub_default_price.campground_price ASC
			  </if>
			</when>
			<when test="'price_high'.equals(sortOption)">
			  <if test="startDate != null">
			  ORDER BY COALESCE(sub_price.campground_price, sub_default_price.campground_price) DESC
			  </if>
			  <if test="startDate == null">
			  ORDER BY sub_default_price.campground_price DESC
			  </if>
			</when>
			<when test="'rating_high'.equals(sortOption)">
			  ORDER BY COALESCE(AVG(r.review_rating), 0) DESC
			</when>
			<when test="'most_popular'.equals(sortOption)">
			  ORDER BY COALESCE(AVG(r.review_rating), 0) * COUNT(r.review_id) DESC
			</when>
			<when test="'date_desc'.equals(sortOption)">
			  ORDER BY c.created_at DESC
			</when>
			<otherwise>
			  <if test="startDate != null">
			  ORDER BY COALESCE(sub_price.campground_price, sub_default_price.campground_price) ASC
			  </if>
			  <if test="startDate == null">
			  ORDER BY sub_default_price.campground_price ASC
			  </if>
			</otherwise>
		</choose>
				
        LIMIT #{limit} OFFSET #{offset}
	</select>
		
	<resultMap id="CampgroundCardResultMap" type="com.m4gi.dto.CampgroundCardDTO">
	    <id property="campgroundId" column="campgroundId"/>
	    <result property="campgroundName" column="campgroundName"/>
	    <result property="addrSido" column="addrSido"/>
	    <result property="addrSigungu" column="addrSigungu"/>
	    <result property="campgroundPrice" column="campgroundPrice"/>
	    <result property="reviewRatingAvg" column="reviewRatingAvg"/>
	    <result property="totalCurrentStock" column="totalCurrentStock"/>
	    <result property="isWishlisted" column="isWishlisted"/>
	    <result property="campgroundType" column="campgroundType" typeHandler="com.m4gi.handler.CsvSetTypeHandler"/>
	    <result property="campgroundImage" column="campgroundImage"/>
	</resultMap>

	<!-- 캠핑장 목록 조회 -->
	
	<!-- 캠핑장 검색 목록 필터링  -->
		<select id="selectCampgroundIdsByFilter" parameterType="com.m4gi.dto.CampgroundFilterRequestDTO" resultType="java.lang.Integer">
			SELECT DISTINCT c.campground_id
			FROM campgrounds c
			LEFT JOIN campground_zones z ON c.campground_id = z.campground_id
			WHERE 1 = 1
			
			<if test = "campgroundTypes != null and !campgroundTypes.isEmpty()">
				AND (
					<foreach collection="campgroundTypes" item = "type" separator = " OR ">
						FIND_IN_SET(#{type}, c.campground_type)
					</foreach>
				)
			</if>
			
			<if test = "siteEnviroments != null and !siteEnviroments.isEmpty()">
				AND (
					<foreach collection = "siteEnviroments" item = "terrain" separator=" OR ">
						z.zone_terrain_type = #{terrain}
					</foreach>
				)
			</if>
			
			<if test="featureList != null and !featureList.isEmpty()">
				<foreach collection = "featureList" item = "feature">
					AND FIND_IN_SET(#{feature}, c.environments)
				</foreach>
			</if>
		</select>	
	<!-- 캠핑장 검색 목록 필터링  -->

	<!-- 상세 페이지 -->
	<select id="selectCampgroundById" parameterType="int" resultType="java.util.Map">
		SELECT
			c.*,
			(SELECT COUNT(*)
		FROM wishlists
			WHERE campground_id = c.campground_id AND wishlist_type = 1) AS totalWishCount
			FROM
		campgrounds c
			WHERE
		c.campground_id = #{campgroundId}
	</select>

	<select id="selectReviewById" parameterType="int" resultType="java.util.Map">
		SELECT
			r.*,
			cs.site_name
		FROM
			reviews r
		LEFT JOIN reservations res ON r.reservation_id = res.reservation_id
		LEFT JOIN campground_sites cs ON res.reservation_site = cs.site_id
		WHERE
			r.campground_id = #{campgroundId}
		ORDER BY r.created_at DESC;
	</select>

	<!-- 캠핑장 구역 불러오기 및 이미지 추출용 -->
	<select id="selectCampgroundZones" parameterType="int" resultType="java.util.Map">
		SELECT 
			z.zone_id,
			z.zone_name,
			z.zone_type,
			z.zone_terrain_type,
			z.capacity,
			z.zone_image,
			z.default_weekday_price,
			z.default_weekend_price,
			COUNT(s.site_id) AS total_sites
		FROM campground_zones z
		LEFT JOIN campground_sites s ON z.zone_id = s.zone_id AND s.is_active = TRUE
		WHERE z.campground_id = #{campgroundId}
		AND z.is_active = TRUE
		GROUP BY z.zone_id, z.zone_name, z.zone_type, z.zone_terrain_type, z.capacity, z.zone_image, z.default_weekday_price, z.default_weekend_price
		ORDER BY z.zone_name
	</select>
	
	<!-- 특정 날짜 범위에서 예약 가능한 구역별 사이트 수 계산 (current_stock 고려) -->
	<select id="selectAvailableZoneSites" parameterType="map" resultType="java.util.Map">
		SELECT 
			z.zone_id,
			(
				-- 전체 current_stock 합계
				(SELECT SUM(s_total.current_stock) 
				 FROM campground_sites s_total 
				 WHERE s_total.zone_id = z.zone_id AND s_total.is_active = TRUE)
				-
				-- 예약된 개수 (실제 예약만)
				(SELECT COUNT(DISTINCT r_reserved.reservation_id)
				 FROM reservations r_reserved
				 INNER JOIN campground_sites s_reserved ON r_reserved.reservation_site = s_reserved.site_id
				 WHERE s_reserved.zone_id = z.zone_id
				 AND r_reserved.reservation_status = 1
				 AND r_reserved.reservation_date &lt;= #{endDate}
				 AND r_reserved.end_date &gt;= #{startDate})
			) AS available_sites
		FROM campground_zones z
		WHERE z.campground_id = #{campgroundId}
		AND z.is_active = TRUE
		GROUP BY z.zone_id
	</select>
	
	<!-- 캠핑장 구역 상세 페이지 -->
	<select id="selectCampgroundMapImage" parameterType="int" resultType="java.lang.String">
	  SELECT JSON_UNQUOTE(JSON_EXTRACT(campground_image, '$.map[0]'))
	  FROM campgrounds
	  WHERE campground_id = #{campgroundId}
	</select>

	<!-- 사이트 ID로 구역 ID 찾기 -->
	<select id="selectZoneIdBySiteId" parameterType="String" resultType="java.lang.Integer">
		SELECT s.zone_id 
		FROM campground_sites s 
		WHERE s.site_id = #{siteId}
	</select>

	<!-- 구역 ID로 캠핑장 ID 찾기 -->
	<select id="selectCampgroundIdByZoneId" parameterType="int" resultType="java.lang.Integer">
		SELECT z.campground_id 
		FROM campground_zones z 
		WHERE z.zone_id = #{zoneId}
	</select>

	<!-- 예약 사이트 캠핑장 조회-->
	<select id="findCampgroundById" resultType="com.m4gi.dto.CampgroundDTO">
		SELECT
		campground_id AS campgroundId,
		campground_name AS campgroundName,
		campground_phone AS campgroundPhone,
		addr_full AS address,
		checkin_time AS checkinTime,
		checkout_time AS checkoutTime
		FROM campgrounds
		WHERE campground_id = #{campgroundId}
	</select>

	
	
	
	
</mapper>