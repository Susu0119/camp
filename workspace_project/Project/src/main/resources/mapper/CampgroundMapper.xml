<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="com.m4gi.mapper.CampgroundMapper">
	
	<!-- 캠핑장 목록 조회 -->
	<select id="selectSearchedCampgrounds" parameterType="CampgroundSearchDTO" resultMap="CampgroundCardResultMap">
	    SELECT
	        c.campground_id AS campgroundId,
	        c.campground_name AS campgroundName,
	        c.addr_sido AS addrSido,
	        c.addr_sigungu AS addrSigungu,
	        c.campground_type AS campgroundType,
	        COALESCE(AVG(r.review_rating), 0) AS reviewRatingAvg,
	        COUNT(r.review_id) AS reviewCount,
	        SUM(cs.current_stock) AS totalCurrentStock,
	        JSON_UNQUOTE(JSON_EXTRACT(c.campground_image, '$.thumbnail[0]')) AS campgroundImage,
	        <if test="startDate != null">
	        COALESCE(sub_price.campground_price, sub_default_price.campground_price) AS campgroundPrice,
	        </if>
	        <if test="startDate == null">
	        sub_default_price.campground_price AS campgroundPrice,
	        </if>
	        CASE
	            WHEN EXISTS (
	                SELECT 1 FROM wishlists w
	                WHERE w.provider_code = #{providerCode}
	                AND w.provider_user_id = #{providerUserId}
	                AND w.wishlist_type = 1
	                AND w.campground_id = c.campground_id
	            )
	            THEN 1 ELSE 0
	        END AS isWishlisted
	    FROM campgrounds c
	    LEFT JOIN reviews r
	        ON c.campground_id = r.campground_id
	    LEFT JOIN campground_sites cs
	        ON c.campground_id = cs.campground_id
	    <if test="startDate != null">
	    LEFT JOIN (
	        SELECT
	            ps.campground_id,
	            MIN(CASE
	                WHEN DAYOFWEEK(#{startDate}) IN (1, 7) THEN ps.peak_weekend_price
	                ELSE ps.peak_weekday_price
	            END) AS campground_price
	        FROM campground_peak_seasons ps
	        WHERE #{startDate} BETWEEN ps.peak_start_date AND ps.peak_end_date
	        GROUP BY ps.campground_id
	    ) AS sub_price ON c.campground_id = sub_price.campground_id
	    LEFT JOIN (
	        SELECT
	            z.campground_id,
	            MIN(CASE
	                WHEN DAYOFWEEK(#{startDate}) IN (1, 7) THEN z.default_weekend_price
	                ELSE z.default_weekday_price
	            END) AS campground_price
	        FROM campground_zones z
	        WHERE z.is_active = TRUE
	        GROUP BY z.campground_id
	    ) AS sub_default_price ON c.campground_id = sub_default_price.campground_id
	    </if>
	    <if test="startDate == null">
	    LEFT JOIN (
	        SELECT
	            z.campground_id,
	            MIN(z.default_weekday_price) AS campground_price
	        FROM campground_zones z
	        WHERE z.is_active = TRUE
	        GROUP BY z.campground_id
	    ) AS sub_default_price ON c.campground_id = sub_default_price.campground_id
	    </if>
	
	    WHERE c.campground_name LIKE CONCAT('%', #{campgroundName}, '%')
		
		<if test="campgroundIdList != null and !campgroundIdList.isEmpty()">
			AND c.campground_id IN
			<foreach item="id" collection="campgroundIdList" open="(" separator="," close=")">
				#{id}
			</foreach>
		</if>
		
		<if test="locations != null and !locations.isEmpty()">
            AND (
                <foreach collection="locations" item="loc" separator=" OR ">
           		(
	                (CASE c.addr_sido
	                    WHEN '경북' THEN '경상북도'
	                    WHEN '경남' THEN '경상남도'
	                    WHEN '전북' THEN '전라북도'
	                    WHEN '전남' THEN '전라남도'
	                    WHEN '충북' THEN '충청북도'
	                    WHEN '충남' THEN '충청남도'
	                    WHEN '부산' THEN '부산광역시'
	                    WHEN '서울' THEN '서울특별시'
	                    WHEN '대구' THEN '대구광역시'
	                    WHEN '인천' THEN '인천광역시'
	                    WHEN '광주' THEN '광주광역시'
	                    WHEN '대전' THEN '대전광역시'
	                    WHEN '울산' THEN '울산광역시'
	                    WHEN '세종' THEN '세종특별자치시'
	                    WHEN '제주' THEN '제주특별자치도'
	                    ELSE c.addr_sido
	                END) = #{loc.sido}
	                
	                AND c.addr_sigungu = #{loc.sigungu}
	            )
        </foreach>
            )
        </if>
	
	    <if test="startDate != null and endDate != null">
	    AND NOT EXISTS (
	        SELECT 1
	        FROM campground_closed_dates cd
	        WHERE cd.campground_id = c.campground_id
	        AND (
	            (cd.closed_start_date &lt;= #{startDate} AND cd.closed_end_date &gt;= #{startDate}) OR
	            (cd.closed_start_date &lt;= #{endDate} AND cd.closed_end_date &gt;= #{endDate}) OR
	            (cd.closed_start_date &gt;= #{startDate} AND cd.closed_end_date &lt;= #{endDate})
	        )
	    )
	
	    AND EXISTS (
	        SELECT 1
	        FROM campground_sites cs_inner
	        WHERE cs_inner.campground_id = c.campground_id
	        AND cs_inner.capacity >= #{people}
	        AND NOT EXISTS (
	            SELECT 1
	            FROM reservations r2
	            WHERE r2.reservation_site = cs_inner.site_id
	            AND r2.reservation_date BETWEEN #{startDate} AND #{endDate}
	        )
	    )
	    </if>
	    <if test="startDate == null or endDate == null">
	    AND EXISTS (
	        SELECT 1
	        FROM campground_sites cs_inner
	        WHERE cs_inner.campground_id = c.campground_id
	        AND cs_inner.capacity >= #{people}
	    )
	    </if>
	
	    GROUP BY
	        c.campground_id,
	        c.campground_name,
	        c.addr_sido,
	        c.addr_sigungu,
	        c.campground_type,
	        c.campground_image<if test="startDate != null">,
	        sub_price.campground_price</if>,
	        sub_default_price.campground_price
		
		<choose>
			<when test="'price_low'.equals(sortOption)">
			  <if test="startDate != null">
			  ORDER BY COALESCE(sub_price.campground_price, sub_default_price.campground_price) ASC
			  </if>
			  <if test="startDate == null">
			  ORDER BY sub_default_price.campground_price ASC
			  </if>
			</when>
			<when test="'price_high'.equals(sortOption)">
			  <if test="startDate != null">
			  ORDER BY COALESCE(sub_price.campground_price, sub_default_price.campground_price) DESC
			  </if>
			  <if test="startDate == null">
			  ORDER BY sub_default_price.campground_price DESC
			  </if>
			</when>
			<when test="'rating_high'.equals(sortOption)">
			  ORDER BY COALESCE(AVG(r.review_rating), 0) DESC
			</when>
			<when test="'most_popular'.equals(sortOption)">
			  ORDER BY COALESCE(AVG(r.review_rating), 0) * COUNT(r.review_id) DESC
			</when>
			<when test="'date_desc'.equals(sortOption)">
			  ORDER BY c.created_at DESC
			</when>
			<otherwise>
			  <if test="startDate != null">
			  ORDER BY COALESCE(sub_price.campground_price, sub_default_price.campground_price) ASC
			  </if>
			  <if test="startDate == null">
			  ORDER BY sub_default_price.campground_price ASC
			  </if>
			</otherwise>
		</choose>
				
        LIMIT #{limit} OFFSET #{offset}
	</select>
		
	<resultMap id="CampgroundCardResultMap" type="com.m4gi.dto.CampgroundCardDTO">
	    <id property="campgroundId" column="campgroundId"/>
	    <result property="campgroundName" column="campgroundName"/>
	    <result property="addrSido" column="addrSido"/>
	    <result property="addrSigungu" column="addrSigungu"/>
	    <result property="campgroundPrice" column="campgroundPrice"/>
	    <result property="reviewRatingAvg" column="reviewRatingAvg"/>
	    <result property="totalCurrentStock" column="totalCurrentStock"/>
	    <result property="isWishlisted" column="isWishlisted"/>
	    <result property="campgroundType" column="campgroundType" typeHandler="com.m4gi.handler.CsvSetTypeHandler"/>
	    <result property="campgroundImage" column="campgroundImage"/>
	</resultMap>

	<!-- 캠핑장 목록 조회 -->
	
	<!-- 캠핑장 검색 목록 필터링  -->
		<select id="selectCampgroundIdsByFilter" parameterType="com.m4gi.dto.CampgroundFilterRequestDTO" resultType="java.lang.Integer">
			SELECT DISTINCT c.campground_id
			FROM campgrounds c
			LEFT JOIN campground_zones z ON c.campground_id = z.campground_id
			WHERE 1 = 1
			
			<if test = "campgroundTypes != null and !campgroundTypes.isEmpty()">
				AND (
					<foreach collection="campgroundTypes" item = "type" separator = " OR ">
						FIND_IN_SET(#{type}, c.campground_type)
					</foreach>
				)
			</if>
			
			<if test = "siteEnviroments != null and !siteEnviroments.isEmpty()">
				AND (
					<foreach collection = "siteEnviroments" item = "terrain" separator=" OR ">
						z.zone_terrain_type = #{terrain}
					</foreach>
				)
			</if>
			
			<if test="featureList != null and !featureList.isEmpty()">
				<foreach collection = "featureList" item = "feature">
					AND FIND_IN_SET(#{feature}, c.environments)
				</foreach>
			</if>
		</select>	
	<!-- 캠핑장 검색 목록 필터링  -->

	<!-- 상세 페이지 -->
	<select id="selectCampgroundById" parameterType="int" resultType="java.util.Map">
		SELECT
			c.*,
			(SELECT COUNT(*)
		FROM wishlists
			WHERE campground_id = c.campground_id AND wishlist_type = 1) AS totalWishCount
			FROM
		campgrounds c
			WHERE
		c.campground_id = #{campgroundId}
	</select>

	<select id="selectReviewById" parameterType="int" resultType="java.util.Map">
		SELECT
			r.*,
			cs.site_name
		FROM
			reviews r
		LEFT JOIN reservations res ON r.reservation_id = res.reservation_id
		LEFT JOIN campground_sites cs ON res.reservation_site = cs.site_id
		WHERE
			r.campground_id = #{campgroundId}
		ORDER BY r.created_at DESC;
	</select>

	<!-- 캠핑장 구역 불러오기 및 이미지 추출용 -->
	<select id="selectCampgroundZones" parameterType="int" resultType="java.util.Map">
		SELECT 
			z.zone_id,
			z.zone_name,
			z.zone_type,
			z.zone_terrain_type,
			z.capacity,
			z.zone_image,
			z.default_weekday_price,
			z.default_weekend_price,
			COUNT(s.site_id) AS total_sites
		FROM campground_zones z
		LEFT JOIN campground_sites s ON z.zone_id = s.zone_id AND s.is_active = TRUE
		WHERE z.campground_id = #{campgroundId}
		AND z.is_active = TRUE
		GROUP BY z.zone_id, z.zone_name, z.zone_type, z.zone_terrain_type, z.capacity, z.zone_image, z.default_weekday_price, z.default_weekend_price
		ORDER BY z.zone_name
	</select>
	
	<!-- 특정 날짜 범위에서 예약 가능한 구역별 사이트 수 계산 (예약 가능한 사이트 개수 기준으로 통일) -->
	<select id="selectAvailableZoneSites" parameterType="map" resultType="java.util.Map">
		SELECT 
			z.zone_id,
			(
				-- 예약 가능한 사이트 개수를 계산 (CampgroundZoneMapper와 동일한 로직)
				SELECT COUNT(cs.site_id)
				FROM campground_sites cs
				WHERE cs.zone_id = z.zone_id
					AND cs.is_active = TRUE
					AND cs.current_stock > (
						SELECT COUNT(r.reservation_id)
						FROM reservations r
						WHERE r.reservation_site = cs.site_id
						AND r.reservation_status = 1
						AND r.reservation_date &lt;= #{endDate}
						AND r.end_date &gt;= #{startDate}
					)
			) AS available_sites
		FROM campground_zones z
		WHERE z.campground_id = #{campgroundId}
		AND z.is_active = TRUE
		GROUP BY z.zone_id
	</select>
	
	<!-- 캠핑장 구역 상세 페이지 -->
	<select id="selectCampgroundMapImage" parameterType="int" resultType="java.lang.String">
	  SELECT JSON_UNQUOTE(JSON_EXTRACT(campground_image, '$.map[0]'))
	  FROM campgrounds
	  WHERE campground_id = #{campgroundId}
	</select>

	<!-- 사이트 ID로 구역 ID 찾기 -->
	<select id="selectZoneIdBySiteId" parameterType="String" resultType="java.lang.Integer">
		SELECT s.zone_id 
		FROM campground_sites s 
		WHERE s.site_id = #{siteId}
	</select>

	<!-- 구역 ID로 캠핑장 ID 찾기 -->
	<select id="selectCampgroundIdByZoneId" parameterType="int" resultType="java.lang.Integer">
		SELECT z.campground_id 
		FROM campground_zones z 
		WHERE z.zone_id = #{zoneId}
	</select>

	<!-- 예약 사이트 캠핑장 조회-->
	<select id="findCampgroundById" resultType="com.m4gi.dto.CampgroundDTO">
		SELECT
		campground_id AS campgroundId,
		campground_name AS campgroundName,
		campground_phone AS campgroundPhone,
		addr_full AS address,
		checkin_time AS checkinTime,
		checkout_time AS checkoutTime
		FROM campgrounds
		WHERE campground_id = #{campgroundId}
	</select>

	<!-- ① 전체 사이트 수 조회 -->
	<select id="getTotalSites"
			resultType="int"
			parameterType="int">
		SELECT COUNT(*)
		FROM campground_sites
		WHERE campground_id = #{campgroundId}
		AND is_active      = TRUE
	</select>

	<select id="getUnavailableDates" resultType="java.time.LocalDate" parameterType="map">
		SELECT
		DATE_ADD(r.reservation_date, INTERVAL seq.day DAY) AS block_date
		FROM reservations r
		JOIN campground_sites cs
		ON r.reservation_site = cs.site_id
		JOIN (
		SELECT 0 AS day UNION ALL SELECT 1 UNION ALL SELECT 2
		UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5
		UNION ALL SELECT 6
		) seq
		ON DATE_ADD(r.reservation_date, INTERVAL seq.day DAY) &lt;= r.end_date
		WHERE
		cs.campground_id      = #{campgroundId}
		AND r.reservation_status = 1
		GROUP BY block_date
		HAVING COUNT(*) &gt;= #{totalSites}
	</select>


    <select id="getCampgroundNameBySiteId" resultType="string">
        SELECT c.campground_name
        FROM campgrounds c
        JOIN sites s ON c.campground_id = s.campground_id
        WHERE s.site_id = #{siteId}
    </select>






</mapper>