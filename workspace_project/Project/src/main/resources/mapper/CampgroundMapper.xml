<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="com.m4gi.mapper.CampgroundMapper">
	
	<!-- 캠핑장 목록 조회 -->
	<select id="selectSearchedCampgrounds" parameterType="CampgroundSearchDTO" resultMap="CampgroundCardResultMap">
	    SELECT
	        c.campground_id AS campgroundId,
	        c.campground_name AS campgroundName,
	        c.addr_sido AS addrSido,
	        c.addr_sigungu AS addrSigungu,
	        c.campground_type AS campgroundTypeString,
	        COALESCE(AVG(r.review_rating), 0) AS reviewRatingAvg,
	        COUNT(r.review_id) AS reviewCount,
	        SUM(cs.current_stock) AS totalCurrentStock,
	        JSON_UNQUOTE(JSON_EXTRACT(c.campground_image, '$[0]')) AS campgroundImage,
	        COALESCE(sub_price.campground_price, sub_default_price.campground_price) AS campgroundPrice,
	        CASE
	            WHEN EXISTS (
	                SELECT 1 FROM wishlists w
	                WHERE w.provider_code = #{providerCode}
	                AND w.provider_user_id = #{providerUserId}
	                AND w.wishlist_type = 1
	                AND w.campground_id = c.campground_id
	            )
	            THEN 1 ELSE 0
	        END AS isWishlisted
	    FROM campgrounds c
	    LEFT JOIN reviews r
	        ON c.campground_id = r.campground_id
	    LEFT JOIN campground_sites cs
	        ON c.campground_id = cs.campground_id
	    LEFT JOIN (
	        SELECT
	            ps.campground_id,
	            MIN(CASE
	                WHEN DAYOFWEEK(#{startDate}) IN (1, 7) THEN ps.peak_weekend_price
	                ELSE ps.peak_weekday_price
	            END) AS campground_price
	        FROM campground_peak_seasons ps
	        WHERE #{startDate} BETWEEN ps.peak_start_date AND ps.peak_end_date
	        GROUP BY ps.campground_id
	    ) AS sub_price ON c.campground_id = sub_price.campground_id
	    LEFT JOIN (
	        SELECT
	            z.campground_id,
	            MIN(CASE
	                WHEN DAYOFWEEK(#{startDate}) IN (1, 7) THEN z.default_weekend_price
	                ELSE z.default_weekday_price
	            END) AS campground_price
	        FROM campground_zones z
	        WHERE z.is_active = TRUE
	        GROUP BY z.campground_id
	    ) AS sub_default_price ON c.campground_id = sub_default_price.campground_id
	
	    WHERE c.campground_name LIKE CONCAT('%', #{campgroundName}, '%')
	
	    <if test="addrSigunguList != null and !addrSigunguList.isEmpty()">
		  AND c.addr_sigungu IN
		  <foreach item="sigungu" collection="addrSigunguList" open="(" separator="," close=")">
		    #{sigungu}
		  </foreach>
		</if>
	
	    AND NOT EXISTS (
	        SELECT 1
	        FROM campground_closed_dates cd
	        WHERE cd.campground_id = c.campground_id
	        AND (
	            (cd.closed_start_date &lt;= #{startDate} AND cd.closed_end_date &gt;= #{startDate}) OR
	            (cd.closed_start_date &lt;= #{endDate} AND cd.closed_end_date &gt;= #{endDate}) OR
	            (cd.closed_start_date &gt;= #{startDate} AND cd.closed_end_date &lt;= #{endDate})
	        )
	    )
	
	    AND EXISTS (
	        SELECT 1
	        FROM campground_sites cs_inner
	        WHERE cs_inner.campground_id = c.campground_id
	        AND cs_inner.capacity >= #{people}
	        AND NOT EXISTS (
	            SELECT 1
	            FROM reservations r2
	            WHERE r2.reservation_site = cs_inner.site_id
	            AND r2.reservation_date BETWEEN #{startDate} AND #{endDate}
	        )
	    )
	
	    GROUP BY
	        c.campground_id,
	        c.campground_name,
	        c.addr_sido,
	        c.addr_sigungu,
	        c.campground_type,
	        c.campground_image,
	        sub_price.campground_price, 
	        sub_default_price.campground_price
		
		<choose>
			<when test="'price_low'.equals(sortOption)">
			  ORDER BY COALESCE(sub_price.campground_price, sub_default_price.campground_price) ASC
			</when>
			<when test="'price_high'.equals(sortOption)">
			  ORDER BY COALESCE(sub_price.campground_price, sub_default_price.campground_price) DESC
			</when>
			<when test="'rating_high'.equals(sortOption)">
			  ORDER BY COALESCE(AVG(r.review_rating), 0) DESC
			</when>
			<when test="'most_popular'.equals(sortOption)">
			  ORDER BY COALESCE(AVG(r.review_rating), 0) * COUNT(r.review_id) DESC
			</when>
			<when test="'date_desc'.equals(sortOption)">
			  ORDER BY c.created_at DESC
			</when>
			<otherwise>
			  ORDER BY COALESCE(sub_price.campground_price, sub_default_price.campground_price) ASC
			</otherwise>
		</choose>
				
        LIMIT #{limit} OFFSET #{offset}
	</select>
		
	<resultMap id="CampgroundCardResultMap" type="com.m4gi.dto.CampgroundCardDTO">
	    <id property="campgroundId" column="campgroundId"/>
	    <result property="campgroundName" column="campgroundName"/>
	    <result property="addrSido" column="addrSido"/>
	    <result property="addrSigungu" column="addrSigungu"/>
	    <result property="campgroundPrice" column="campgroundPrice"/>
	    <result property="reviewRatingAvg" column="reviewRatingAvg"/>
	    <result property="totalCurrentStock" column="totalCurrentStock"/>
	    <result property="isWishlisted" column="isWishlisted"/>
	    <result property="campgroundType" column="campgroundTypeString" typeHandler="com.m4gi.handler.CsvSetTypeHandler"/>
	    <result property="campgroundImage" column="campgroundImage"/>
	</resultMap>

	<!-- 캠핑장 목록 조회 -->
	
	<!-- 캠핑장 검색 목록 필터링  -->
		<select id="selectCampgroundIdsByFilter" parameterType="com.m4gi.dto.CampgroundFilterRequestDTO" resultType="java.lang.String">
			SELECT DISTINCT c.campground_id
			FROM campgrounds c
			LEFT JOIN campground_zones z ON c.campground_id = z.campground_id
			WHERE 1 = 1
			
			<if test = "campgroundTypes != null and !campgroundTypes.isEmpty()">
				AND (
					<foreach collection="campgroundTypes" item = "type" separator = " OR ">
						FIND_IN_SET(#{type}, c.campground_type)
					</foreach>
				)
			</if>
			
			<if test = "siteEnviroments != null and !siteEnviroments.isEmpty()">
				AND c.campground_type IN
				<foreach collection = "siteEnviroments" item = "env" open = "(" separator="," close=")">
					#{env}
				</foreach>
			</if>
			
			<if test="featureList != null and !featureList.isEmpty()">
				<foreach collection = "featureList" item = "feature">
					AND FIND_IN_SET(#{feature}, c.environments)
				</foreach>
			</if>
		</select>	
	<!-- 캠핑장 검색 목록 필터링  -->

	<!-- 상세 페이지 -->
	<select id="selectCampgroundById" parameterType="java.lang.String" resultType="java.util.Map">
		SELECT
			c.*,
			(SELECT COUNT(*)
		FROM wishlists
			WHERE campground_id = c.campground_id AND wishlist_type = 1) AS totalWishCount
			FROM
		campgrounds c
			WHERE
		c.campground_id = #{campgroundId}
	</select>

	<select id="selectReviewById" parameterType="java.lang.String" resultType="java.util.Map">
		SELECT
			r.*
		FROM
			reviews r
		WHERE
			r.campground_id = #{campgroundId};
	</select>
	
	<!-- 캠핑장 구역 상세 페이지 -->
	<select id="selectCampgroundMapImage" parameterType="java.lang.String" resultType="java.lang.String">
	  SELECT JSON_UNQUOTE(JSON_EXTRACT(campground_image, '$.map[0]'))
	  FROM campgrounds
	  WHERE campground_id = #{campgroundId}
	</select>
	
	
</mapper>